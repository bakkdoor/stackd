in: core.lists ;

: reduce ! ( seq identity quot -- result )
    swapd each ;

: ++ ! ( seq1 seq2 -- newseq )
    append ;

: append ! ( seq1 seq2 -- newseq )
    + ;

: 3append ! ( seq1 seq2 seq3 -- newseq )
    append append ;

: length ! ( seq -- n )
    :length #() callm ;

: at-end? ! ( seq -- ? )
    length 0 = ;

! Applies quot to each element in seq in turn,
! also invoking between in-between each pair of elements.
! e.g. #("a" "b" "c") [ "X" print- ] [ print- ] interleave -> aXbXc
: interleave ! ( seq between quot -- )
    pick dup empty?
    [ 4drop ]
    [
        at-end?
        [ 3drop ]
        [
            pick first swap dup swapd call over call
            rot rest -rot
            [ interleave ] call
        ]
        if
    ]
    if ;

! e.g. "foo" "(" ")" 3append -> "(foo)"
: surround ! ( seq1 seq2 seq3 -- newseq )
    swapd 3append ;

! e.g. "a" "b" "," glue -> "a,b"
: glue ! ( seq1 seq2 seq3 -- newseq )
    swap 3append ;

: as-seq ! ( elem -- seq )
    dup seq?
    [
        #() swap <<
    ] unless ;