! ( x p q -- )
: bi 
    [ keep ] dip call ;

: 2drop
    drop drop ;

: 3drop
    drop drop drop ;

: unless 
    swap [ drop ] [ call ] if ; 

! ( ? quot -- )
: when 
    swap [ call ] [ drop ] if ;

! ( x y p q -- )
: bi* 
    [ dip ] dip call ;

! ( x y z p q r -- )
: tri* 
    [ [ 2dip ] dip dip ] dip call ;

! Double spreaders
! ( w x y z p q -- )
: 2bi* 
    [ 2dip ] dip call ;

! ( u v w x y z p q r -- )
: 2tri*
    [ 4dip ] 2dip 2bi* ;


! Appliers
! ( x y quot -- )
: bi@
    dup bi* ;

! ( x y z quot -- )
: tri@ 
    dup dup tri* ;

! Double appliers
! ( w x y z quot -- )
: 2bi@ 
    dup 2bi* ;

! ( u v w y x z quot -- )
: 2tri@ 
    dup dup 2tri* ;

!( x y quot -- ? )
: both?
    bi@ and ;

! ( x y quot -- ? )
: either?
    bi@ or ;

! ( x y -- x y x )
! e.g.: 1 2 over -> 1 2 1
: over 
    [ dup ] dip swap ;

! ( x quot -- x )
! Call a quotation with a value on the stack,
! restoring the value when the quotation returns.
: keep
    over [ call ] dip ;

! ( obj1 obj2 quot -- curry )
: 2curry
    curry curry ;

! ( obj1 obj2 obj3 quot -- curry )
: 3curry
    curry curry curry ;

! ( x y z -- y x z )
: swapd
    [ swap ] dip ;

! ( obj -- ? )
: >boolean
    [ t ] [ f ] if ;

! ( quot n -- )
! : times
!     dup 0 <=
!     [ t ]
!     [ 1- swap dup call swap times ]
!     if ;