in: core.misc ;

: bi ! ( x p q -- )
    [ keep ] dip call ;

! Applies p to the three input values,
! then applies q to the three input values.
: 3bi ! ( x y z p q -- )
    [ 3keep ] dip call ;

: 2drop ! ( x y -- )
    drop drop ;

: 3drop ! ( x y z -- )
    2drop drop ;

: 4drop ! (w x y z -- )
    3drop drop ;

: unless ! ( ? quot -- )
    swap [ drop ] [ call ] if ; 

: when ! ( ? quot -- )
    swap [ call ] [ drop ] if ;

: bi* ! ( x y p q -- )
    [ dip ] dip call ;

: tri* ! ( x y z p q r -- )
    [ [ 2dip ] dip dip ] dip call ;

! Double spreaders
: 2bi* ! ( w x y z p q -- )
    [ 2dip ] dip call ;

: 2tri* ! ( u v w x y z p q r -- )
    [ 4dip ] 2dip 2bi* ;

! Appliers
: bi@ ! ( x y quot -- )
    dup bi* ;

: tri@ ! ( x y z quot -- )
    dup dup tri* ;

! Double appliers
: 2bi@ ! ( w x y z quot -- )
    dup 2bi* ;

: 2tri@ ! ( u v w y x z quot -- )
    dup dup 2tri* ;

: both? !( x y quot -- ? )
    bi@ and ;

: either? ! ( x y quot -- ? )
    bi@ or ;

: twice ! ( quot -- )
    dup [ call ] dip call ;

: pick ! ( x y z -- x y z x )
    swapd over [ drop swapd ] keep ;

! e.g.: 1 2 over -> 1 2 1
: over ! ( x y -- x y x )
    [ dup ] dip swap ;

: 2over ! ( x y z -- x y z x y )
    pick pick ;

! Call a quotation with a value on the stack,
! restoring the value when the quotation returns.
: keep ! ( x quot -- x )
    over [ call ] dip ;

! Call a quotation with three values on the stack,
! restoring the values when the quotation returns.
: 2keep ! ( x y quot -- x y )
    [ 2dup ] dip 2dip ;

! Call a quotation with three values on the stack,
! restoring the values when the quotation returns.
: 3keep ! ( x y z quot -- x y z )
    [ 3dup ] dip 3dip ;

: 2curry ! ( obj1 obj2 quot -- curry )
    curry curry ;

: 3curry ! ( obj1 obj2 obj3 quot -- curry )
    curry curry curry ;

: swapd ! ( x y z -- y x z )
    [ swap ] dip ;

: >boolean ! ( obj -- ? )
    [ t ] [ f ] if ;

! : times ! ( quot n -- )
!     dup 0 <=
!     [ t ]
!     [ 1- swap dup call swap times ]
!     if ;

: nip ! ( x y -- y )
    swap drop ;

: 2nip ! ( x y z -- z )
    nip nip ;

: 2dup ! ( x y -- x y x y )
    over over ;

: 3dup ! ( x y z -- x y z x y z )
    [ [ over ] dip swap ] 3 times ;

: dupd ! ( x y -- x x y )
    [ dup ] dip ;

: tuck ! ( x y -- y x y )
    dup swapd ;

: rot ! ( x y z -- y z x )
    swapd dup swapd drop ;

: -rot ! ( x y z -- z x y )
    rot rot ;

: spin ! ( x y z -- z y x ) 
    swap rot ;

: roll ! ( x y z t -- y z t x )
    [ rot ] dip swap ;

: -roll ! ( x y z t -- t x y z ) 
    swap [ -rot ] dip ;

! Calls the quotation repeatedly until it outputs f.
: loop ! ( pred: ( -- ? ) -- )
    [ call ] keep [ loop ] curry when ; 

! Executes one iteration of a while or until loop.
: do ! ( pred body -- pred body )
    dup 2dip ; 

! Calls body until pred returns f.
: while ! ( pred: ( -- ? ) body: ( -- ) -- )
    swap do compose [ loop ] curry when ; 