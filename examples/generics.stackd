use: core.math core.misc ;
in: examples.generics ;

tuple: shape name ;

tuple: rectangle < shape height width ;
tuple: circle < shape delimiter ;

generic: area ; !( shape -- area )

m: rectangle area
    [ height>> ] [ width>> ] bi * ;

: <rectangle>
    rectangle new "RECTANGLE" >>name ;

m: circle area
    delimiter>> sq core.math::PI * ;

: <circle>
    circle new "CIRCLE" >>name ;

generic: print-name ; ! ( shape -- )
! a method only defined on shape
! will also work on all subclasses (polymorphism) :)
! actually, since Stackd is dynamic, it will work on any
! datatype that has a name slot.
m: shape print-name
    "Shape: " print- name>> print ;

<rectangle>
    10 >>height
    10 >>width
  [ print-name ] keep
  "-- Area: " print- area print ;

<circle>
    10 >>delimiter
  [ print-name ] keep
  "-- Area: " print- area print ;

