grammar Stackd do
  rule program do
    (comment / expression)* <Program>
  end

  rule expression do
    space* (comment / atom)+ terminal space* <Expression>
  end

  rule comment do
    space* "!" (![\n] .)* [\n]? <Comment>
  end

  rule atom do
    space* val:(datum / identifier) space* <Atom>
  end

  rule datum do
    array / boolean / integer / float / string / quotation / symbol / regex / hash
  end

  rule boolean do
    ("t" / "f") space+ <Boolean>
  end

  rule integer do
    ("-"? "0" / "-"? [1-9] [0-9]*) &(space / terminal) <Integer>
  end

  rule float do
    ("-"? [0-9]+ "." [0-9]+) <Float>
  end

  rule string do
    '"' string_val:(string_char)* '"' <StackdString>
  end

  rule string_char do
    !'"' char:(.) {
      def value
        self.char.text_value
      end
    }
  end

  rule quotation do
    "[" atoms:(atom)+ "]" <Quotation>
  end

  rule regex do
    '/' val:(!'/' .)* '/' <Regex>
  end

  rule array do
    '#(' space* items:(atom)* space* ')' <Array>
  end

  rule hash do
    '{{' space* entries:(space? entry:(hash_entry))* space* '}}' <Hashtable>
  end

  rule hash_entry do
    key:(atom) '=>' val:(atom) <HashEntry>
  end

  rule symbol do
    ':' symbol_name:(!':' identifier) <Symbol>
  end

  rule identifier do
    (!delimiter .)+ <Identifier>
  end

  rule space do
    [\s\n\r\t]
  end

  rule paren do
    [\(\)\[\]]
  end

  rule delimiter do
    paren / space / terminal
  end

  rule terminal do
    ';'
  end
end
